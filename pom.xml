package ru.seventech.esb.technoprom.config;

import org.apache.camel.processor.DefaultMaskingFormatter;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Pattern;

/**
 * Кастомный форматер секретов, чтобы в логах не светились. <br>
 * работает при включенном logMask в кэмелКонтексте или отдельном log задании. <br>
 * Дефолтная работа отключена, т.к. она не соотвествует нашему логу
 */
public class CustomMaskingFormatter extends DefaultMaskingFormatter {

    @SuppressWarnings("unchecked")
    private static final Set<String> CUSTOM_KEYWORDS = new HashSet(Arrays.asList("authorization", "rosrgatewayToken"));
    private Pattern keyValueNoQuotesMaskPattern;

    public CustomMaskingFormatter() {
        // если на нашем логе включить maskJson то при маскирование упадет со StackOverflowError, но нам пока и не надо
        super(false, false, false);
        keyValueNoQuotesMaskPattern = createKeyValueNoQuotesMaskPattern(CUSTOM_KEYWORDS);
    }

    @Override
    public String format(String source) {
        String answer = keyValueNoQuotesMaskPattern.matcher(source).replaceAll("$1" + getMaskString());
        return super.format(answer);
    }

    /**
     * Штатный паттерн key="value" не подходит <br>
     * Он отслеживает строго c кавычками типа такого: authorization = 'eyJhb.GciOi' или такого authorizationGate = "eyJhb.GciOi" <br>
     * А нам надо в том числе без кавычек: authorization = eyJhb.GciOi <br>
     * ЕСТЬ ОГРАНИЧЕНИЯ: пары key=value обязательно должны разделяться запятыми или перносом строки,
     * если в value встретится запятая, то заматчится только до запятой
     * @param keywords ключевые слова
     * @return регулярка
     */
    @SuppressWarnings("all")
    protected Pattern createKeyValueNoQuotesMaskPattern(Set<String> keywords) {
        StringBuilder regex = this.createOneOfThemRegex(keywords);
        if (regex == null) {
            return null;
        } else {
            regex.insert(0, "([\\w]*(?:");
            regex.append(")[\\w]*[\\s]*?=[\\s]*?)((.+?)(?=[\\r\\n,]|$))");
            return Pattern.compile(regex.toString(), Pattern.CASE_INSENSITIVE);
        }
    }
}
