private final ReportService reportService;
    private final ReportCompleteDossierRepository reportCompleteDossierRepository;
    private final ReportDossierPersonRepository reportDossierPersonRepository;
    private final ClientsClient clients;
    private final ReportDocumentDetailRepository reportDocumentDetailRepository;
    private final ReportSpecificationBuilderService specificationBuilder;
    private final UserService userService;
    private final ModelMapper modelMapper;
    private final EntityManager entityManager;

    @Autowired
    private LoggerRequestContext loggerRequestContext;

    @Override
    @Transactional(readOnly = true)
    public ReportPersonResponseDto getCompleteDossiersPersons(ReportPersonRequestDto requestDto) 
        throws AccessDeniedException {
        
        // 1. Проверка доступа
        var report = reportService.getReport(requestDto.getReportId());
        if (!report.getAuthor().equals(loggerRequestContext.getConsumer())) {
            throw new AccessDeniedException("Доступ к отчету запрещён");
        }

        // 2. Получение основной страницы данных с джойнами
        Specification<ReportCompleteDossier> spec = specificationBuilder.buildSpecification(requestDto);
        Pageable pageable = requestDto.getPageable();
        
        // Используем EntityGraph для загрузки связанных данных
        EntityGraph<ReportCompleteDossier> entityGraph = entityManager.createEntityGraph(ReportCompleteDossier.class);
        entityGraph.addAttributeNodes("client", "dossier", "report");
        Subgraph<Dossier> dossierSubgraph = entityGraph.addSubgraph("dossier");
        dossierSubgraph.addAttributeNodes("clientProduct", "dossierType");
        Subgraph<ClientProduct> clientProductSubgraph = dossierSubgraph.addSubgraph("clientProduct");
        clientProductSubgraph.addAttributeNodes("product", "clientAccounts");
        Subgraph<Product> productSubgraph = clientProductSubgraph.addSubgraph("product");
        productSubgraph.addAttributeNodes("productType");

        Page<ReportCompleteDossier> dossierPage = reportCompleteDossierRepository.findAll(
            (root, query, cb) -> {
                query.distinct(true);
                return spec.toPredicate(root, query, cb);
            },
            pageable
        );

        // 3. Получение всех ID для batch-запросов
        Set<Long> dossierIds = dossierPage.getContent().stream()
            .map(d -> d.getDossier().getId())
            .collect(Collectors.toSet());

        Set<Long> clientIds = dossierPage.getContent().stream()
            .map(d -> d.getClient().getId())
            .collect(Collectors.toSet());

        // 4. Batch-запросы для связанных данных
        // Получаем все персоны для всех досье одним запросом
        Map<Long, List<ReportDossierPerson>> personsByDossierId = reportDossierPersonRepository
            .findByReportCompleteDossierDossierIdIn(dossierIds)
            .stream()
            .collect(Collectors.groupingBy(p -> p.getReportCompleteDossier().getDossier().getId()));

        // Получаем все документы для всех досье одним запросом
        Map<Long, List<ReportDocumentDetail>> documentsByDossierId = reportDocumentDetailRepository
            .findByReportCompleteDossierDossierIdIn(dossierIds)
            .stream()
            .collect(Collectors.groupingBy(d -> d.getReportCompleteDossier().getDossier().getId()));

        // 5. Проверка прав доступа VIP
        boolean hasVipAccess = userService.hasRole(RolesConstants.VIP_FL);

        // 6. Преобразование данных
        List<ReportPersonResponseDto.ReportDataDTO> reportData = dossierPage.getContent().stream()
            .map(dossier -> convertToReportDataDTO(
                dossier, 
                personsByDossierId.getOrDefault(dossier.getDossier().getId(), Collections.emptyList()),
                documentsByDossierId.getOrDefault(dossier.getDossier().getId(), Collections.emptyList()),
                hasVipAccess
            ))
            .collect(Collectors.toList());

        // 7. Сборка ответа
        return buildResponse(report, dossierPage, reportData, requestDto);
    }

    private ReportPersonResponseDto.ReportDataDTO convertToReportDataDTO(
        ReportCompleteDossier dossier,
        List<ReportDossierPerson> persons,
        List<ReportDocumentDetail> documentDetails,
        boolean hasVipAccess
    ) {
        // Обработка персоны
        ReportPersonResponseDto.ReportDataDTO.ClientPersonDTO clientPerson = persons.stream()
            .findFirst()
            .map(person -> buildClientPersonDTO(dossier, person))
            .orElse(null);

        // Обработка документов
        boolean isDocumentAccess = dossier.getClient() == null || 
            dossier.getClient().getVipStatus() == null ||
            !dossier.getClient().getVipStatus() || 
            hasVipAccess;

        List<ReportPersonResponseDto.ReportDataDTO.DocumentDetailDTO> documentsDetail = documentDetails.stream()
            .map(detail -> buildDocumentDetailDTO(detail, isDocumentAccess))
            .collect(Collectors.toList());

        // Обработка продукта
        ClientProduct clientProduct = dossier.getDossier() != null ? dossier.getDossier().getClientProduct() : null;

        return ReportPersonResponseDto.ReportDataDTO.builder()
            .clientPerson(clientPerson)
            .dossierId(dossier.getDossier().getId())
            .dossierTypeName(dossier.getDossier() != null ? dossier.getDossier().getDossierType().getName() : null)
            .productName(getProductName(clientProduct))
            .productTypeName(getProductTypeName(clientProduct))
            .productOpen(getProductOpenDate(clientProduct))
            .dealId(getDealId(clientProduct))
            .completeStatus(dossier.getCompleteStatus())
            .completeStatusName(dossier.getCompleteStatus() != null ? 
                CompleteStatusDocuments.valueOf(dossier.getCompleteStatus()).getDescription() : null)
            .documentsTotal(dossier.getDocumentsTotal())
            .documentsAvailable(dossier.getDocumentsAvailable())
            .dossierOfficeId(getOfficeId(dossier))
            .dossierOfficeName(getOfficeName(dossier))
            .productCreationChannel(getProductCreationChannel(clientProduct))
            .productActivationChannel(getProductActivationChannel(clientProduct))
            .productPlanEndDate(getProductPlanEndDate(clientProduct))
            .productEndDate(getProductEndDate(clientProduct))
            .contractStatus(getContractStatus(clientProduct))
            .accountCode(getAccountCode(clientProduct))
            .documentsDetail(documentsDetail)
            .build();
    }

    // Вспомогательные методы для построения DTO
    private ReportPersonResponseDto.ReportDataDTO.ClientPersonDTO buildClientPersonDTO(
        ReportCompleteDossier dossier, 
        ReportDossierPerson person
    ) {
        return ReportPersonResponseDto.ReportDataDTO.ClientPersonDTO.builder()
            .clientId(dossier.getClient() != null ? dossier.getClient().getId() : null)
            .absClientId(dossier.getClient() != null ? dossier.getClient().getAbsClientId() : null)
            .clientStatusName(dossier.getClientStatus() != null ? 
                ClientStatus.getDescriptionFromCode(dossier.getClientStatus()) : null)
            .dboStatus(dossier.getClient() != null ? dossier.getClient().getDboStatus() : false)
            .absClientCreated(dossier.getClient() != null ? dossier.getClient().getAbsCreatedAt() : null)
            .name(person.getName())
            .surname(person.getSurname())
            .secondName(person.getSecondName())
            .birthday(person.getBirthdate() != null ? LocalDate.from(person.getBirthdate()) : null)
            .series(cleanString(person.getDocumentSeries()))
            .number(cleanString(person.getDocumentNumber()))
            .isVip(dossier.getClient() != null ? dossier.getClient().getVipStatus() : false)
            .build();
    }

    private ReportPersonResponseDto.ReportDataDTO.DocumentDetailDTO buildDocumentDetailDTO(
        ReportDocumentDetail detail, 
        boolean isDocumentAccess
    ) {
        return ReportPersonResponseDto.ReportDataDTO.DocumentDetailDTO.builder()
            .documentTypeName(detail.getDocumentTypeName())
            .documentId(detail.getDocument() != null && isDocumentAccess ? 
                detail.getDocument().getDocumentId() : null)
            .documentAvailable(detail.getDocumentAvailable())
            .documentRequired(detail.getDocumentRequired())
            .build();
    }

    private String cleanString(String input) {
        return input != null ? input.replaceAll("\\s+", "") : null;
    }

    // Геттеры для вынесения повторяющейся логики
    private String getProductName(ClientProduct clientProduct) {
        return clientProduct != null && clientProduct.getProduct() != null ? 
            clientProduct.getProduct().getName() : null;
    }

    private String getProductTypeName(ClientProduct clientProduct) {
        return clientProduct != null && clientProduct.getProduct() != null && 
            clientProduct.getProduct().getProductType() != null ? 
            clientProduct.getProduct().getProductType().getType() : null;
    }

    private LocalDate getProductOpenDate(ClientProduct clientProduct) {
        return clientProduct != null && clientProduct.getProductOpen() != null ? 
            LocalDate.from(clientProduct.getProductOpen()) : null;
    }

    private String getDealId(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getDealId() : null;
    }

    private Long getOfficeId(ReportCompleteDossier dossier) {
        return dossier.getReport() != null && dossier.getReport().getOffice() != null ? 
            dossier.getReport().getOffice().getId() : null;
    }

    private String getOfficeName(ReportCompleteDossier dossier) {
        return dossier.getReport() != null && dossier.getReport().getOffice() != null ? 
            dossier.getReport().getOffice().getLabel() : null;
    }

    private String getProductCreationChannel(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getProductCreationChannel() : null;
    }

    private String getProductActivationChannel(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getProductActivationChannel() : null;
    }

    private Timestamp getProductPlanEndDate(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getProductPlanEnd() : null;
    }

    private Timestamp getProductEndDate(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getProductEnd() : null;
    }

    private String getContractStatus(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getContractStatus() : null;
    }

    private String getAccountCode(ClientProduct clientProduct) {
        return clientProduct != null && clientProduct.getClientAccounts() != null ? 
            clientProduct.getClientAccounts().stream()
                .findFirst()
                .map(ClientAccount::getAccountCode)
                .orElse(null) : null;
    }

    private ReportPersonResponseDto buildResponse(
        Report report,
        Page<ReportCompleteDossier> dossierPage,
        List<ReportPersonResponseDto.ReportDataDTO> reportData,
        ReportPersonRequestDto requestDto
    ) {
        ReportPersonResponseDto.ReportInfoDTO reportInfo = ReportPersonResponseDto.ReportInfoDTO.builder()
            .reportTypeId(report.getReportType().getId())
            .reportId(report.getReportId())
            .generationStatus(report.getGenerationStatus())
            .author(report.getAuthor())
            .createdAt(report.getCreatedAt())
            .clientCategoryId(report.getClientCategory() != null ? report.getClientCategory().getId() : null)
            .clientStatus(ClientStatus.getDescriptionFromCode(report.getClientStatus()))
            .office(report.getOffice() != null ? report.getOffice().getId() : null)
            .productTypeName(report.getProductType() != null ? report.getProductType().getType() : null)
            .dossiersTotal(report.getDossiersTotal() != null ? report.getDossiersTotal() : 0L)
            .dossiersComplete(report.getDossiersComplete() != null ? report.getDossiersComplete() : 0L)
            .clientCreated(new ReportPersonResponseDto.ReportInfoDTO.DateRangeDTO(
                report.getClientCreatedMin(),
                report.getClientCreatedMax()))
            .productCreated(new ReportPersonResponseDto.ReportInfoDTO.DateRangeDTO(
                report.getProductCreatedMin(),
                report.getProductCreatedMax()))
            .build();

        return ReportPersonResponseDto.builder()
            .reportInfo(reportInfo)
            .reportData(reportData)
            .pagination(new ReportPersonResponseDto.PaginationDTO(
                (long) dossierPage.getNumber() + 1,
                (long) dossierPage.getTotalPages(), 
                dossierPage.getTotalElements(), 
                (long) dossierPage.getSize()))
            .sortBy(convertSortBy(requestDto.getSortBy()))
            .filter(convertFilter(requestDto.getFilter()))
            .build();
    }

    private ReportPersonResponseDto.SortByDTO convertSortBy(ReportPersonRequestDto.SortByDTO sortBy) {
        if (sortBy == null) return null;
        return new ReportPersonResponseDto.SortByDTO(sortBy.getField(), sortBy.getValue());
    }

    private List<ReportPersonResponseDto.FilterDTO> convertFilter(List<ReportPersonRequestDto.FilterDTO> filters) {
        if (filters == null) return null;
        return filters.stream()
            .map(f -> new ReportPersonResponseDto.FilterDTO(f.getField(), f.getValue()))
            .collect(Collectors.toList());
    }