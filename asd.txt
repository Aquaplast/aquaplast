@Test
public void testOnlineObjectsRoute_SuccessWithParameters() throws Exception {
    // Подготовка AdviceWith
    AdviceWith.adviceWith(camelContext, "direct:onlineObjectsRoute", a -> {
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/objects");
    });
    
    camelContext.start();
    
    MockEndpoint mockObjects = camelContext.getEndpoint(
        "mock:https:external-service/objects", MockEndpoint.class);
    
    // Настройка ожиданий
    mockObjects.expectedMessageCount(1);
    mockObjects.expectedHeaderReceived("Authorization", "mocked-token");
    mockObjects.expectedHeaderReceived(Exchange.HTTP_METHOD, "GET");
    
    // Мокирование успешного ответа
    String expectedResponse = "[{\"id\":1,\"name\":\"Object 1\"}, {\"id\":2,\"name\":\"Object 2\"}]";
    mockObjects.whenAnyExchangeReceived(exchange -> {
        exchange.getMessage().setBody(expectedResponse);
        exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
    });

    // Параметры запроса
    Map<String, Object> headers = new HashMap<>();
    headers.put("region", "Moscow");
    headers.put("street", "Tverskaya");
    headers.put("house", "1");
    headers.put("cacheUse", "true");
    
    // Выполнение запроса
    Object response = producerTemplate.requestBodyAndHeaders(
        "direct:onlineObjectsRoute", 
        null, // GET запрос без тела
        headers
    );

    // Проверки
    mockObjects.assertIsSatisfied();
    
    // Проверка URL: должен содержать ожидаемые параметры
    String actualUri = mockObjects.getExchanges().get(0).getMessage().getHeader(Exchange.HTTP_URI, String.class);
    assertTrue(actualUri.contains("region=Moscow"));
    assertTrue(actualUri.contains("street=Tverskaya"));
    assertTrue(actualUri.contains("house=1"));
    assertTrue(actualUri.contains("cacheUse=true"));
    
    // Проверка ответа
    assertEquals(expectedResponse, response);
}
