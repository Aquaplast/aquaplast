package com.example.camel;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWith;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
import org.apache.camel.test.spring.junit5.MockEndpoints;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import ru.seventech.esb.technoprom.dto.CreatePackageRequestDto;
import ru.seventech.esb.technoprom.api.CreateApplicationResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest
@CamelSpringBootTest
@MockEndpoints("http.*")
public class CamelRoutesTest {

    @Autowired
    private CamelContext camelContext;

    @Autowired
    private ProducerTemplate producerTemplate;

    @EndpointInject("mock:http:externalService")
    private MockEndpoint mockExternalService;

    @BeforeEach
    public void setUp() throws Exception {
        // Reset mock endpoints before each test
        mockExternalService.reset();
    }

    @Test
    public void testCreatePackageRoute() throws Exception {
        // Arrange: Mock the external HTTP endpoint
        String mockUrl = "mock:https://{{url_createPackage_v2}}?httpClientConfigurer=trustAllHttpClientConfigurer";
        AdviceWith.adviceWith(camelContext, "createPackageRoute", routeBuilder -> {
            routeBuilder.weaveByToUri("https://{{url_createPackage_v2}}.*").replace().to(mockUrl);
        });

        // Mock response from the external service
        String mockResponse = "{\"id\": 12345}";
        mockExternalService.expectedMessageCount(1);
        mockExternalService.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setBody(mockResponse);
        });

        // Create input DTO
        CreatePackageRequestDto requestDto = new CreatePackageRequestDto();
        requestDto.setType("TEST_TYPE");
        requestDto.setData("TEST_DATA");
        requestDto.setOrgId(1L);
        requestDto.setAgentId(2L);

        // Act: Send the request to the route
        Exchange exchange = producerTemplate.send("direct:createPackage", ex -> {
            ex.getIn().setHeader("Authorization", "Bearer test-token");
            ex.getIn().setBody(requestDto);
        });

        // Assert: Verify the response
        mockExternalService.assertIsSatisfied();
        String responseBody = exchange.getIn().getBody(String.class);
        assertNotNull(responseBody);
        assertEquals("12345", exchange.getProperty("createPackageResponse", String.class));

        // Verify headers and properties
        assertEquals("Bearer test-token", exchange.getIn().getHeader("Authorization"));
    }

    @Test
    public void testCreateApplicationRoute() throws Exception {
        // Arrange: Mock the external HTTP endpoint
        String mockUrl = "mock:https://{{url_createApplication_v2}}?httpClientConfigurer=trustAllHttpClientConfigurer";
        AdviceWith.adviceWith(camelContext, "createApplicationRoute", routeBuilder -> {
            routeBuilder.weaveByToUri("https://{{url_createApplication_v2}}.*").replace().to(mockUrl);
        });

        // Mock response from the external service
        CreateApplicationResponse mockResponse = new CreateApplicationResponse();
        mockResponse.setPackageId(12345L);
        mockResponse.setDocuments("mock-documents");
        mockExternalService.expectedMessageCount(1);
        mockExternalService.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setBody(mockResponse);
        });

        // Act: Send the request to the route
        Exchange exchange = producerTemplate.send("direct:createApplication", ex -> {
            ex.getIn().setHeader("Authorization", "Bearer test-token");
            ex.getIn().setBody("{\"packageId\": 12345}");
            ex.setProperty("rosrgatewayToken", "test-rosrgateway-token");
        });

        // Assert: Verify the response
        mockExternalService.assertIsSatisfied();
        CreateApplicationResponse response = exchange.getIn().getBody(CreateApplicationResponse.class);
        assertNotNull(response);
        assertEquals(12345L, response.getPackageId());
        assertEquals("mock-documents", response.getDocuments());

        // Verify properties
        assertEquals("test-rosrgateway-token", exchange.getProperty("rosrgatewayToken"));
    }

    @Test
    public void testGetArchiveRoute() throws Exception {
        // Arrange: Mock the external HTTP endpoint
        String mockUrl = "mock:https://{{url_getFiles_v2}}?httpClientConfigurer=trustAllHttpClientConfigurer";
        AdviceWith.adviceWith(camelContext, "getArchiveRoute", routeBuilder -> {
            routeBuilder.weaveByToUri("https://{{url_getFiles_v2}}.*").replace().to(mockUrl);
        });

        // Mock response from the external service
        String mockResponse = "[{\"name\": \"file1.pdf\", \"location\": \"https://docstore/file1.pdf\", \"consumerId\": \"1\"}]";
        mockExternalService.expectedMessageCount(1);
        mockExternalService.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setBody(mockResponse);
        });

        // Act: Send the request to the route
        Exchange exchange = producerTemplate.send("direct:getArchive", ex -> {
            ex.getIn().setHeader("Authorization", "Bearer test-token");
            ex.getIn().setBody("{\"packageId\": 12345, \"responseId\": 67890}");
            ex.setProperty("rosrgatewayToken", "test-rosrgateway-token");
        });

        // Assert: Verify the response
        mockExternalService.assertIsSatisfied();
        ru.seventech.esb.technoprom.api.GetArchiveResponse response = exchange.getIn().getBody(ru.seventech.esb.technoprom.api.GetArchiveResponse.class);
        assertNotNull(response);
        assertEquals(12345L, response.getPackageId());
        assertEquals(1, response.getDocuments().size());
        assertEquals("file1.pdf", response.getDocuments().get(0).getName());

        // Verify loop index increment
        assertEquals(1, exchange.getProperty("loopIndex_getArchive", Integer.class).intValue());
    }
}
