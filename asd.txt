	@Override
	public FileInfo download(String id, String consumerId) {
		refresh();
		HttpHeaders headers = new HttpHeaders();
		ResponseEntity<ByteArrayResource> bytes = get(headers, id, consumerId);
		if (bytes.getStatusCode() == HttpStatus.UNAUTHORIZED) {
			initialize();
			bytes = get(headers, id, consumerId);
		}
		String fileName = getFilename(bytes.getHeaders());
		Path storage = storageManager.getStorage(uploadstoreName).toPath();
		File folder = storage.resolve(UUID.randomUUID().toString()).toFile();
		if (!folder.exists() && !folder.mkdirs()) {
			log.error("Error creating target folder [{}], docstore id [{}], filename: [{}]", folder, id, fileName);
		}
		Path output = folder.toPath().resolve(fileName);
		FileInfo info = new FileInfo();
		if (bytes.hasBody() && null != bytes.getBody()) {
			try {
				Files.copy(bytes.getBody().getInputStream(), output, StandardCopyOption.REPLACE_EXISTING);
				info.setSize(Files.size(output));
			} catch (IOException e) {
				log.error("Error writing docstore file [{}], target path [{}], docstore_id [{}]", fileName, folder, id);
				throw new RuntimeException("Error writing downoaded file", e);
			}
		}
		info.setName(fileName);
		info.setLocation(storageManager.createURI(storage.relativize(output).toString(), uploadstoreName));
		info.setCreated(new Date(output.toFile().lastModified()));
		info.setType(FilesUtils.resolveFileType(fileName));
		info.setFile(output.toFile());
		if (info.getFile().exists()) {
			info.setHash(Md5Hash.digestAsString(info.getFile()));
		}
		return info;
	}
