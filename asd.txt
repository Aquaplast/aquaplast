@Test
public void testRestartRoute_Success() throws Exception {
    // Подготовка AdviceWith
    AdviceWith.adviceWith(camelContext, "direct:restartRoute", a -> {
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/restart");
    });
    
    camelContext.start();
    
    MockEndpoint mockRestart = camelContext.getEndpoint(
        "mock:https:external-service/restart", MockEndpoint.class);
    
    // Настройка ожиданий
    mockRestart.expectedMessageCount(1);
    mockRestart.expectedHeaderReceived("Authorization", "mocked-token");
    mockRestart.expectedHeaderReceived(Exchange.HTTP_METHOD, "POST");
    
    // Мокирование успешного ответа
    String expectedResponse = "{\"status\":\"SUCCESS\",\"message\":\"Process restarted\"}";
    mockRestart.whenAnyExchangeReceived(exchange -> {
        exchange.getMessage().setBody(expectedResponse);
        exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
    });

    // Параметры запроса
    Map<String, Object> headers = new HashMap<>();
    headers.put("id", "process-123");
    
    // Выполнение запроса
    Object response = producerTemplate.requestBodyAndHeaders(
        "direct:restartRoute", 
        null, // POST запрос без тела
        headers
    );

    // Проверки
    mockRestart.assertIsSatisfied();
    
    // Проверка URL: должен содержать идентификатор процесса
    String actualUri = mockRestart.getExchanges().get(0).getMessage().getHeader(Exchange.HTTP_URI, String.class);
    assertTrue(actualUri.contains("/restart/process-123"), "URL должен содержать идентификатор процесса");
    
    // Проверка ответа
    assertEquals(expectedResponse, response);
}
