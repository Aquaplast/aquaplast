@Test
public void testDeletePackageRoute_NotFound() throws Exception {
    AdviceWith.adviceWith(camelContext, "direct:deletePackageRoute", a -> {
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/deletePackage");
    });
    
    camelContext.start();
    
    MockEndpoint mockDelete = camelContext.getEndpoint(
        "mock:https:external-service/deletePackage", MockEndpoint.class);
    
    // Эмуляция ошибки 404
    mockDelete.whenAnyExchangeReceived(exchange -> {
        // Создаем полноценное исключение
        HttpOperationFailedException exception = new HttpOperationFailedException(
            "https://external-service/deletePackage/123", 
            404, 
            "Not Found", 
            "https://external-service", 
            "{\"error\":\"Package not found\"}".getBytes(), 
            null
        );
        exchange.setException(exception);
    });

    String requestBody = "{\"packageId\":\"non-existent-id\"}";
    
    Exchange response = producerTemplate.request(
        "direct:deletePackageRoute", 
        exchange -> exchange.getIn().setBody(requestBody)
    );

    // Проверки
    mockDelete.assertIsSatisfied();
    
    // Маршрут должен вернуть 400, а не 404!
    assertEquals(400, response.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertTrue(response.getMessage().getBody(String.class).contains("Package not found"));
    
    // Дополнительная проверка, что не возвращается removedPackageId
    assertFalse(response.getMessage().getBody(String.class).contains("removedPackageId"));
}
