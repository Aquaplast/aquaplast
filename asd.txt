package ru.thprom.igrr.docstore.client;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.*;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import ru.thprom.igrr.api.domain.FileInfo;
import ru.thprom.igrr.api.service.StorageManager;
import ru.thprom.igrr.util.FilesUtils;
import ru.thprom.igrr.util.Md5Hash;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collections;
import java.util.Date;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DocstoreImplTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private StorageManager storageManager;

    @InjectMocks
    private DocstoreImpl docstore;

    private final String authUri = "http://auth.uri";
    private final String clientId = "test-client";
    private final String clientSecret = "test-secret";
    private final String uploadUri = "http://upload.uri";
    private final String downloadUri = "http://download.uri/{id}";
    private final String reststoreName = "reststore";
    private final String uploadstoreName = "uploadstore";
    private final String storageScheme = "storage";
    private final String reststoreScheme = "rest";
    private final String separator = "/";
    private final long timeShift = 60;

    @BeforeEach
    void setUp() {
        docstore = new DocstoreImpl(
            storageManager,
            uploadstoreName,
            authUri,
            clientId,
            clientSecret,
            uploadUri,
            downloadUri,
            reststoreName,
            storageScheme,
            reststoreScheme,
            separator,
            timeShift
        );
        docstore.endpoint = restTemplate; // Inject mocked RestTemplate
    }

    @Test
    void testInitialize() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);

        ResponseEntity<ObjectNode> response = ResponseEntity.ok(tokenNode);
        when(restTemplate.exchange(eq(authUri), eq(HttpMethod.POST), any(HttpEntity.class), eq(ObjectNode.class)))
            .thenReturn(response);

        docstore.initialize();

        assertNotNull(docstore.token);
        assertEquals("test-token", docstore.token.get("access_token").asText());
        assertTrue(docstore.token.has("timestamp"));
    }

    @Test
    void testRefreshWhenTokenIsNull() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);

        ResponseEntity<ObjectNode> response = ResponseEntity.ok(tokenNode);
        when(restTemplate.exchange(eq(authUri), eq(HttpMethod.POST), any(HttpEntity.class), eq(ObjectNode.class)))
            .thenReturn(response);

        docstore.refresh();

        assertNotNull(docstore.token);
    }

    @Test
    void testRefreshWhenTokenIsExpired() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "old-token");
        tokenNode.put("expires_in", 3600);
        tokenNode.put("timestamp", System.currentTimeMillis() / 1000 - 4000); // Expired token
        docstore.token = tokenNode;

        ObjectNode newTokenNode = mapper.createObjectNode();
        newTokenNode.put("access_token", "new-token");
        newTokenNode.put("expires_in", 3600);

        ResponseEntity<ObjectNode> response = ResponseEntity.ok(newTokenNode);
        when(restTemplate.exchange(eq(authUri), eq(HttpMethod.POST), any(HttpEntity.class), eq(ObjectNode.class)))
            .thenReturn(response);

        docstore.refresh();

        assertNotNull(docstore.token);
        assertEquals("new-token", docstore.token.get("access_token").asText());
    }

    @Test
    void testUploadSuccess() throws Exception {
        // Mock token
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);
        tokenNode.put("timestamp", System.currentTimeMillis() / 1000);
        docstore.token = tokenNode;

        // Mock file
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);

        // Mock response
        ObjectNode responseNode = mapper.createObjectNode();
        responseNode.put("file_uuid", "test-uuid");
        ResponseEntity<JsonNode> responseEntity = ResponseEntity.ok(responseNode);
        when(restTemplate.postForEntity(eq(uploadUri), any(HttpEntity.class), eq(JsonNode.class)))
            .thenReturn(responseEntity);

        String result = docstore.upload(mockFile, "test-file.txt", "consumer1");

        assertEquals("test-uuid", result);
    }

    @Test
    void testUploadFileNotExists() {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(false);

        assertThrows(IllegalArgumentException.class, () -> docstore.upload(mockFile, "test-file.txt", null));
    }

    @Test
    void testUploadUnauthorizedThenSuccess() throws Exception {
        // Mock token
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);
        tokenNode.put("timestamp", System.currentTimeMillis() / 1000);
        docstore.token = tokenNode;

        // Mock file
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);

        // Mock unauthorized response then success
        ObjectNode responseNode = mapper.createObjectNode();
        responseNode.put("file_uuid", "test-uuid");
        
        ResponseEntity<JsonNode> unauthorizedResponse = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        ResponseEntity<JsonNode> successResponse = ResponseEntity.ok(responseNode);
        
        when(restTemplate.postForEntity(eq(uploadUri), any(HttpEntity.class), eq(JsonNode.class)))
            .thenReturn(unauthorizedResponse)
            .thenReturn(successResponse);
        
        // Mock token refresh
        ObjectNode newTokenNode = mapper.createObjectNode();
        newTokenNode.put("access_token", "new-token");
        newTokenNode.put("expires_in", 3600);
        ResponseEntity<ObjectNode> tokenResponse = ResponseEntity.ok(newTokenNode);
        when(restTemplate.exchange(eq(authUri), eq(HttpMethod.POST), any(HttpEntity.class), eq(ObjectNode.class)))
            .thenReturn(tokenResponse);

        String result = docstore.upload(mockFile, "test-file.txt", null);

        assertEquals("test-uuid", result);
        verify(restTemplate, times(2)).postForEntity(eq(uploadUri), any(HttpEntity.class), eq(JsonNode.class));
    }

    @Test
    void testDownloadSuccess() throws Exception {
        // Mock token
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);
        tokenNode.put("timestamp", System.currentTimeMillis() / 1000);
        docstore.token = tokenNode;

        // Mock response
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment")
            .filename("test-file.txt")
            .build());
        byte[] testData = "test content".getBytes();
        ByteArrayResource resource = new ByteArrayResource(testData);
        ResponseEntity<ByteArrayResource> responseEntity = new ResponseEntity<>(resource, headers, HttpStatus.OK);
        
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(ByteArrayResource.class), anyString()))
            .thenReturn(responseEntity);

        // Mock storage
        Path mockPath = mock(Path.class);
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.lastModified()).thenReturn(System.currentTimeMillis());
        when(mockPath.toFile()).thenReturn(mockFile);
        when(storageManager.getStorage(uploadstoreName)).thenReturn(mockPath);
        when(storageManager.createURI(anyString(), eq(uploadstoreName))).thenReturn(URI.create("storage://test-uri"));

        // Mock Files operations
        when(Files.copy(any(), any(), any())).thenReturn(0L);
        when(Files.size(any())).thenReturn((long) testData.length);
        when(Md5Hash.digestAsString(any())).thenReturn("test-hash");

        FileInfo result = docstore.download("test-uuid", "consumer1");

        assertNotNull(result);
        assertEquals("test-file.txt", result.getName());
        assertEquals("storage://test-uri", result.getLocation().toString());
    }

    @Test
    void testDownloadUnauthorizedThenSuccess() throws Exception {
        // Mock token
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);
        tokenNode.put("timestamp", System.currentTimeMillis() / 1000);
        docstore.token = tokenNode;

        // Mock unauthorized response then success
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment")
            .filename("test-file.txt")
            .build());
        byte[] testData = "test content".getBytes();
        ByteArrayResource resource = new ByteArrayResource(testData);
        
        ResponseEntity<ByteArrayResource> unauthorizedResponse = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        ResponseEntity<ByteArrayResource> successResponse = new ResponseEntity<>(resource, headers, HttpStatus.OK);
        
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(ByteArrayResource.class), anyString()))
            .thenReturn(unauthorizedResponse)
            .thenReturn(successResponse);
        
        // Mock token refresh
        ObjectNode newTokenNode = mapper.createObjectNode();
        newTokenNode.put("access_token", "new-token");
        newTokenNode.put("expires_in", 3600);
        ResponseEntity<ObjectNode> tokenResponse = ResponseEntity.ok(newTokenNode);
        when(restTemplate.exchange(eq(authUri), eq(HttpMethod.POST), any(HttpEntity.class), eq(ObjectNode.class)))
            .thenReturn(tokenResponse);

        // Mock storage
        Path mockPath = mock(Path.class);
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.lastModified()).thenReturn(System.currentTimeMillis());
        when(mockPath.toFile()).thenReturn(mockFile);
        when(storageManager.getStorage(uploadstoreName)).thenReturn(mockPath);
        when(storageManager.createURI(anyString(), eq(uploadstoreName))).thenReturn(URI.create("storage://test-uri"));

        // Mock Files operations
        when(Files.copy(any(), any(), any())).thenReturn(0L);
        when(Files.size(any())).thenReturn((long) testData.length);
        when(Md5Hash.digestAsString(any())).thenReturn("test-hash");

        FileInfo result = docstore.download("test-uuid", "consumer1");

        assertNotNull(result);
        verify(restTemplate, times(2)).exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(ByteArrayResource.class), anyString());
    }

    @Test
    void testGetLocationByUUID() {
        URI result = docstore.getLocationByUUID("test-uuid");
        assertEquals("http://download.uri/test-uuid", result.toString());
    }

    @Test
    void testDeleteSuccess() {
        // Mock token
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);
        tokenNode.put("timestamp", System.currentTimeMillis() / 1000);
        docstore.token = tokenNode;

        ResponseEntity<Void> responseEntity = ResponseEntity.ok().build();
        when(restTemplate.exchange(anyString(), eq(HttpMethod.DELETE), any(HttpEntity.class), eq(Void.class), anyString()))
            .thenReturn(responseEntity);

        boolean result = docstore.delete("test-uuid", "consumer1");
        assertTrue(result);
    }

    @Test
    void testDeleteUnauthorizedThenSuccess() {
        // Mock token
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);
        tokenNode.put("timestamp", System.currentTimeMillis() / 1000);
        docstore.token = tokenNode;

        ResponseEntity<Void> unauthorizedResponse = ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        ResponseEntity<Void> successResponse = ResponseEntity.ok().build();
        
        when(restTemplate.exchange(anyString(), eq(HttpMethod.DELETE), any(HttpEntity.class), eq(Void.class), anyString()))
            .thenReturn(unauthorizedResponse)
            .thenReturn(successResponse);
        
        // Mock token refresh
        ObjectNode newTokenNode = mapper.createObjectNode();
        newTokenNode.put("access_token", "new-token");
        newTokenNode.put("expires_in", 3600);
        ResponseEntity<ObjectNode> tokenResponse = ResponseEntity.ok(newTokenNode);
        when(restTemplate.exchange(eq(authUri), eq(HttpMethod.POST), any(HttpEntity.class), eq(ObjectNode.class)))
            .thenReturn(tokenResponse);

        boolean result = docstore.delete("test-uuid", null);
        assertTrue(result);
        verify(restTemplate, times(2)).exchange(anyString(), eq(HttpMethod.DELETE), any(HttpEntity.class), eq(Void.class), anyString());
    }

    @Test
    void testDeleteFailed() {
        // Mock token
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode tokenNode = mapper.createObjectNode();
        tokenNode.put("access_token", "test-token");
        tokenNode.put("expires_in", 3600);
        tokenNode.put("timestamp", System.currentTimeMillis() / 1000);
        docstore.token = tokenNode;

        ResponseEntity<Void> responseEntity = ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        when(restTemplate.exchange(anyString(), eq(HttpMethod.DELETE), any(HttpEntity.class), eq(Void.class), anyString()))
            .thenReturn(responseEntity);

        boolean result = docstore.delete("test-uuid", null);
        assertFalse(result);
    }

    @Test
    void testLocate() throws URISyntaxException {
        URI baseUri = new URI("storage://base-uri");
        when(storageManager.createURI("test-uuid", reststoreName)).thenReturn(baseUri);
        when(storageManager.resolve(baseUri, "test-file.txt")).thenReturn(new URI("storage://final-uri"));

        URI result = docstore.locate("test-uuid", "prefix/test-file.txt");
        assertEquals("storage://final-uri", result.toString());
    }

    @Test
    void testLocated() {
        String validUri1 = "storage://reststore/123e4567-e89b-12d3-a456-426614174000/test.txt";
        String validUri2 = "rest://reststore/123e4567-e89b-12d3-a456-426614174000/test.txt";
        String invalidUri = "http://wrong-store/123e4567-e89b-12d3-a456-426614174000/test.txt";

        assertTrue(docstore.located(URI.create(validUri1)));
        assertTrue(docstore.located(URI.create(validUri2)));
        assertFalse(docstore.located(URI.create(invalidUri)));
    }

    @Test
    void testGetFilenameFromContentDisposition() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment")
            .filename("test-file.txt")
            .build());

        String filename = docstore.getFilename(headers);
        assertEquals("test-file.txt", filename);
    }

    @Test
    void testGetFilenameFromEncodedContentDisposition() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Content-Disposition", "attachment; filename*=UTF-8''%D1%82%D0%B5%D1%81%D1%82.txt; filename=\"test.txt\"");

        String filename = docstore.getFilename(headers);
        assertEquals("тест.txt", filename);
    }

    @Test
    void testGetFilenameUnknown() {
        HttpHeaders headers = new HttpHeaders();
        String filename = docstore.getFilename(headers);
        assertEquals("unknown", filename);
    }
}
