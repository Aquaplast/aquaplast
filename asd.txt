package com.example.camel;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWith;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
import org.apache.camel.test.spring.junit5.MockEndpoints;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import ru.seventech.esb.technoprom.dto.CreatePackageRequestDto;
import ru.seventech.esb.technoprom.api.CreateApplicationResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

@SpringBootTest(classes = com.example.camel.Application.class)
@CamelSpringBootTest
@MockEndpoints("http.*")
public class CamelRoutesTest {

    private static final Logger logger = LoggerFactory.getLogger(CamelRoutesTest.class);

    @Autowired
    private CamelContext camelContext;

    @Autowired
    private ProducerTemplate producerTemplate;

    @EndpointInject("mock:http:externalService")
    private MockEndpoint mockExternalService;

    @BeforeEach
    public void setUp() throws Exception {
        // Reset mock endpoints before each test
        mockExternalService.reset();
        // Log available route IDs and endpoints for debugging
        logger.info("Available routes: {}", camelContext.getRouteDefinitions().stream()
                .map(def -> def.getId() + " -> " + def.getOutputs()).collect(java.util.stream.Collectors.toList()));
    }

    private boolean adviceRoute(String routeId, String originalUriPattern, String mockUri) {
        try {
            AdviceWith.adviceWith(camelContext, routeId, routeBuilder -> {
                routeBuilder.weaveByToUri(originalUriPattern).replace().to(mockUri);
            });
            logger.info("Successfully advised route {} with pattern {}", routeId, originalUriPattern);
            return true;
        } catch (IllegalArgumentException e) {
            logger.error("Failed to advise route '{}'. Error: {}. Available routes: {}", routeId, e.getMessage(),
                    camelContext.getRouteDefinitions().stream()
                            .map(def -> def.getId() + " -> " + def.getOutputs())
                            .collect(java.util.stream.Collectors.toList()));
            return false;
        }
    }

    @Test
    public void testCreatePackageRoute() throws Exception {
        String routeId = "direct:createPackageRoute";
        String mockUrl = "mock:https://{{url_createPackage_v2}}?httpClientConfigurer=trustAllHttpClientConfigurer";
        boolean routeAdvised = adviceRoute(routeId, "https://{{url_createPackage_v2}}.*", mockUrl);

        if (!routeAdvised) {
            logger.warn("Skipping HTTP endpoint mocking for {} due to missing route or endpoint", routeId);
        }

        String mockResponse = "{\"id\": 12345}";
        mockExternalService.expectedMessageCount(routeAdvised ? 1 : 0);
        mockExternalService.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setBody(mockResponse);
        });

        CreatePackageRequestDto requestDto = new CreatePackageRequestDto();
        requestDto.setType("TEST_TYPE");
        requestDto.setData("TEST_DATA");
        requestDto.setOrgId(1L);
        requestDto.setAgentId(2L);

        Exchange exchange = producerTemplate.send("direct:createPackage", ex -> {
            ex.getIn().setHeader("Authorization", "Bearer test-token");
            ex.getIn().setBody(requestDto);
        });

        mockExternalService.assertIsSatisfied();
        String responseBody = exchange.getIn().getBody(String.class);
        assertNotNull(responseBody);
        if (routeAdvised) {
            assertEquals("12345", exchange.getProperty("createPackageResponse", String.class));
        }
        assertEquals("Bearer test-token", exchange.getIn().getHeader("Authorization"));
    }

    @Test
    public void testCreateApplicationRoute() throws Exception {
        String routeId = "direct:createApplicationRoute";
        String mockUrl = "mock:https://{{url_createApplication_v2}}?httpClientConfigurer=trustAllHttpClientConfigurer";
        boolean routeAdvised = adviceRoute(routeId, "https://{{url_createApplication_v2}}.*", mockUrl);

        if (!routeAdvised) {
            logger.warn("Skipping HTTP endpoint mocking for {} due to missing route or endpoint", routeId);
        }

        CreateApplicationResponse mockResponse = new CreateApplicationResponse();
        mockResponse.setPackageId(12345L);
        mockResponse.setDocuments("mock-documents");
        mockExternalService.expectedMessageCount(routeAdvised ? 1 : 0);
        mockExternalService.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setBody(mockResponse);
        });

        Exchange exchange = producerTemplate.send("direct:createApplication", ex -> {
            ex.getIn().setHeader("Authorization", "Bearer test-token");
            ex.getIn().setBody("{\"packageId\": 12345}");
            ex.setProperty("rosrgatewayToken", "test-rosrgateway-token");
        });

        mockExternalService.assertIsSatisfied();
        CreateApplicationResponse response = exchange.getIn().getBody(CreateApplicationResponse.class);
        assertNotNull(response);
        if (routeAdvised) {
            assertEquals(12345L, response.getPackageId());
            assertEquals("mock-documents", response.getDocuments());
            assertEquals("test-rosrgatewayToken", exchange.getProperty("rosrgatewayToken"));
        }
    }

    @Test
    public void testGetArchiveRoute() throws Exception {
        String routeId = "direct:getArchiveRoute";
        // Match the dynamic endpoint used in the route
        String mockUrl = "mock:https://rr-generate-service.mdlw.ahml.stage/api/integration/v2.*";
        boolean routeAdvised = adviceRoute(routeId, "https://${exchangeProperty.getFilesUrlWithUid}.*", mockUrl);

        if (!routeAdvised) {
            logger.warn("Skipping HTTP endpoint mocking for {} due to missing route or endpoint", routeId);
        }

        String mockResponse = "[{\"name\": \"file1.pdf\", \"location\": \"https://docstore/file1.pdf\", \"consumerId\": \"1\"}]";
        mockExternalService.expectedMessageCount(routeAdvised ? 1 : 0);
        mockExternalService.whenAnyExchangeReceived(exchange -> {
            exchange.getIn().setBody(mockResponse);
        });

        Exchange exchange = producerTemplate.send("direct:getArchive", ex -> {
            ex.getIn().setHeader("Authorization", "Bearer test-token");
            ex.getIn().setBody("{\"packageId\": 12345, \"responseId\": 67890}");
            ex.setProperty("rosrgatewayToken", "test-rosrgateway-token");
        });

        mockExternalService.assertIsSatisfied();
        ru.seventech.esb.technoprom.api.GetArchiveResponse response = exchange.getIn().getBody(ru.seventech.esb.technoprom.api.GetArchiveResponse.class);
        assertNotNull(response);
        if (routeAdvised) {
            assertEquals(12345L, response.getPackageId());
            assertEquals(1, response.getDocuments().size());
            assertEquals("file1.pdf", response.getDocuments().get(0).getName());
            assertEquals(1, exchange.getProperty("loopIndex_getArchive", Integer.class).intValue());
        }
    }
}
