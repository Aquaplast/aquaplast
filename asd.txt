@Test
public void testCreateApplicationRoute_Success() throws Exception {
    // Подготовка AdviceWith
    AdviceWith.adviceWith(camelContext, "direct:createApplicationRoute", a -> {
        // Заменяем вызов внешнего сервиса на mock
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/createApplication");
    });
    
    camelContext.start();
    
    MockEndpoint mockCreateApp = camelContext.getEndpoint(
        "mock:https:external-service/createApplication", MockEndpoint.class);
    
    // Настройка ожиданий
    mockCreateApp.expectedMessageCount(1);
    mockCreateApp.expectedHeaderReceived("Authorization", "mocked-token");
    mockCreateApp.expectedHeaderReceived(Exchange.HTTP_METHOD, "POST");
    
    // Мокирование успешного ответа
    String externalResponse = "["
        + "{"
        + "\"documentId\":1,"
        + "\"consumerId\":\"1\","
        + "\"image\":{\"location\":\"https://old-host.com/files/image1\"},"
        + "\"html\":{\"location\":\"https://old-host.com/files/html1\"}"
        + "},"
        + "{"
        + "\"documentId\":2,"
        + "\"consumerId\":\"2\","
        + "\"image\":{\"location\":\"https://old-host.com/files/image2\"},"
        + "\"html\":{\"location\":\"https://old-host.com/files/html2\"}"
        + "}"
        + "]";
    mockCreateApp.whenAnyExchangeReceived(exchange -> {
        exchange.getMessage().setBody(externalResponse);
        exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
    });

    // Устанавливаем свойства для преобразования URL
    camelContext.getPropertiesComponent().setProperty("docstore_host_bank", "https://bank-docstore");
    camelContext.getPropertiesComponent().setProperty("docstore_host_dom", "https://dom-docstore");
    camelContext.getPropertiesComponent().setProperty("docstore_path", "/api/documents/");

    // Тело запроса
    String requestBody = "{\"packageId\":\"123\"}";
    
    // Выполняем запрос
    String response = producerTemplate.requestBody(
        "direct:createApplicationRoute", 
        requestBody,
        String.class
    );

    // Проверки
    mockCreateApp.assertIsSatisfied();
    
    // Проверяем, что URL документов преобразованы правильно
    assertTrue(response.contains("\"image\":{\"location\":\"https://bank-docstore/api/documents/image1\"}"));
    assertTrue(response.contains("\"html\":{\"location\":\"https://bank-docstore/api/documents/html1\"}"));
    assertTrue(response.contains("\"image\":{\"location\":\"https://dom-docstore/api/documents/image2\"}"));
    assertTrue(response.contains("\"html\":{\"location\":\"https://dom-docstore/api/documents/html2\"}"));
    
    // Проверяем, что packageId добавлен в ответ
    assertTrue(response.contains("\"packageId\":\"123\""));
}

@Test
public void testCreateApplicationRoute_WithOnlyImages() throws Exception {
    AdviceWith.adviceWith(camelContext, "direct:createApplicationRoute", a -> {
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/createApplication");
    });
    
    camelContext.start();
    
    MockEndpoint mockCreateApp = camelContext.getEndpoint(
        "mock:https:external-service/createApplication", MockEndpoint.class);
    
    // Мокирование ответа только с изображениями (без HTML)
    String externalResponse = "["
        + "{"
        + "\"documentId\":1,"
        + "\"consumerId\":\"1\","
        + "\"image\":{\"location\":\"https://old-host.com/files/image1\"}"
        + "}"
        + "]";
    mockCreateApp.whenAnyExchangeReceived(exchange -> {
        exchange.getMessage().setBody(externalResponse);
        exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
    });

    camelContext.getPropertiesComponent().setProperty("docstore_host_bank", "https://bank-docstore");
    camelContext.getPropertiesComponent().setProperty("docstore_path", "/api/documents/");

    String requestBody = "{\"packageId\":\"123\"}";
    
    String response = producerTemplate.requestBody(
        "direct:createApplicationRoute", 
        requestBody,
        String.class
    );

    // Проверки
    mockCreateApp.assertIsSatisfied();
    assertTrue(response.contains("\"image\":{\"location\":\"https://bank-docstore/api/documents/image1\"}"));
    assertFalse(response.contains("\"html\"")); // Убеждаемся, что HTML отсутствует
}

@Test
public void testCreateApplicationRoute_WithOnlyHtml() throws Exception {
    AdviceWith.adviceWith(camelContext, "direct:createApplicationRoute", a -> {
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/createApplication");
    });
    
    camelContext.start();
    
    MockEndpoint mockCreateApp = camelContext.getEndpoint(
        "mock:https:external-service/createApplication", MockEndpoint.class);
    
    // Мокирование ответа только с HTML (без изображений)
    String externalResponse = "["
        + "{"
        + "\"documentId\":1,"
        + "\"consumerId\":\"1\","
        + "\"html\":{\"location\":\"https://old-host.com/files/html1\"}"
        + "}"
        + "]";
    mockCreateApp.whenAnyExchangeReceived(exchange -> {
        exchange.getMessage().setBody(externalResponse);
        exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
    });

    camelContext.getPropertiesComponent().setProperty("docstore_host_bank", "https://bank-docstore");
    camelContext.getPropertiesComponent().setProperty("docstore_path", "/api/documents/");

    String requestBody = "{\"packageId\":\"123\"}";
    
    String response = producerTemplate.requestBody(
        "direct:createApplicationRoute", 
        requestBody,
        String.class
    );

    // Проверки
    mockCreateApp.assertIsSatisfied();
    assertTrue(response.contains("\"html\":{\"location\":\"https://bank-docstore/api/documents/html1\"}"));
    assertFalse(response.contains("\"image\"")); // Убеждаемся, что изображения отсутствуют
}

@Test
public void testCreateApplicationRoute_EmptyResponse() throws Exception {
    AdviceWith.adviceWith(camelContext, "direct:createApplicationRoute", a -> {
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/createApplication");
    });
    
    camelContext.start();
    
    MockEndpoint mockCreateApp = camelContext.getEndpoint(
        "mock:https:external-service/createApplication", MockEndpoint.class);
    
    // Мокирование пустого ответа
    mockCreateApp.whenAnyExchangeReceived(exchange -> {
        exchange.getMessage().setBody("[]");
        exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
    });

    String requestBody = "{\"packageId\":\"123\"}";
    
    String response = producerTemplate.requestBody(
        "direct:createApplicationRoute", 
        requestBody,
        String.class
    );

    // Проверки
    mockCreateApp.assertIsSatisfied();
    assertTrue(response.contains("\"documents\":[]"));
}

@Test
public void testCreateApplicationRoute_HttpError() throws Exception {
    AdviceWith.adviceWith(camelContext, "direct:createApplicationRoute", a -> {
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/createApplication");
    });
    
    camelContext.start();
    
    MockEndpoint mockCreateApp = camelContext.getEndpoint(
        "mock:https:external-service/createApplication", MockEndpoint.class);
    
    // Эмуляция ошибки 400
    mockCreateApp.whenAnyExchangeReceived(exchange -> {
        HttpOperationFailedException exception = new HttpOperationFailedException(
            "https://external-service/createApplication/123", 
            400, 
            "Bad Request", 
            "https://external-service", 
            "{\"error\":\"Invalid request\"}".getBytes(), 
            null
        );
        exchange.setException(exception);
    });

    String requestBody = "{\"packageId\":\"invalid-id\"}";
    
    Exchange response = producerTemplate.request(
        "direct:createApplicationRoute", 
        exchange -> exchange.getIn().setBody(requestBody)
    );

    // Проверки
    mockCreateApp.assertIsSatisfied();
    assertEquals(400, response.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE));
    assertTrue(response.getMessage().getBody(String.class).contains("Invalid request"));
}

@Test
public void testCreateApplicationRoute_Timeout() throws Exception {
    AdviceWith.adviceWith(camelContext, "direct:createApplicationRoute", a -> {
        a.weaveByToUri("https:*").replace().to("mock:https:external-service/createApplication");
    });
    
    camelContext.start();
    
    MockEndpoint mockCreateApp = camelContext.getEndpoint(
        "mock:https:external-service/createApplication", MockEndpoint.class);
    
    // Эмуляция таймаута
    mockCreateApp.whenAnyExchangeReceived(exchange -> {
        throw new SocketTimeoutException("Connection timed out");
    });

    String requestBody = "{\"packageId\":\"123\"}";
    
    Exchange response = producerTemplate.request(
        "direct:createApplicationRoute", 
        exchange -> exchange.getIn().setBody(requestBody)
    );

    // Проверки
    mockCreateApp.assertIsSatisfied();
    assertEquals(500, response.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE));
    String responseBody = response.getMessage().getBody(String.class);
    assertTrue(responseBody.contains("Error
