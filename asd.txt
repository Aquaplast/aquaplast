package ru.seventech.esb.technoprom.config;

import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import lombok.extern.slf4j.Slf4j;
import org.apache.camel.component.http.HttpClientConfigurer;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.hc.client5.http.socket.ConnectionSocketFactory;
import org.apache.hc.client5.http.socket.PlainConnectionSocketFactory;
import org.apache.hc.client5.http.ssl.NoopHostnameVerifier;
import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;
import org.apache.hc.core5.http.config.RegistryBuilder;
import org.apache.hc.core5.util.TimeValue;
import org.apache.hc.core5.util.Timeout;

@Slf4j
public class TrustAllHttpClientConfigurer implements HttpClientConfigurer {

    @Override
    public void configureHttpClient(HttpClientBuilder clientBuilder) {
        try {
            final SSLContext sslContext = createTrustAllSSLContext();

            final SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext,
                NoopHostnameVerifier.INSTANCE);

            final PoolingHttpClientConnectionManager connectionManager =
                new PoolingHttpClientConnectionManager(
                    RegistryBuilder.<ConnectionSocketFactory>create()
                        .register("http", PlainConnectionSocketFactory.getSocketFactory())
                        .register("https", sslsf)
                        .build());

            connectionManager.setMaxTotal(200);
            connectionManager.setDefaultMaxPerRoute(200);

            clientBuilder
                .setConnectionManager(connectionManager)
                .evictIdleConnections(TimeValue.ofMinutes(41))
                .setDefaultRequestConfig(RequestConfig.custom()
                    .setResponseTimeout(Timeout.ofMinutes(38))
                    .setConnectionRequestTimeout(Timeout.ofMinutes(1))
                    .setConnectTimeout(Timeout.ofMinutes(1))
                    .build());

        } catch (Exception e) {
            log.error("configureHttpClient error: {}", e.getMessage());
        }
    }

    private SSLContext createTrustAllSSLContext() throws Exception {
        final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {
            public X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            public void checkClientTrusted(X509Certificate[] certs, String authType) {
            }

            public void checkServerTrusted(X509Certificate[] certs, String authType) {
            }
        }};
        final SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustAllCerts, new SecureRandom());
        return sslContext;
    }
}
