import org.apache.camel.EndpointInject;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWith;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.junit5.CamelSpringBootTest;
import org.apache.camel.test.spring.junit5.MockEndpoints;
import org.apache.camel.test.spring.junit5.UseAdviceWith;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.annotation.DirtiesContext;
import ru.seventech.esb.technoprom.config.AuthService;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@SpringBootTest
@CamelSpringBootTest
@UseAdviceWith
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
@MockEndpoints("https:*")
public class CamelRoutesTest {

    @Autowired
    private ProducerTemplate producerTemplate;

    @EndpointInject("mock:https:external-service/createPackage")
    private MockEndpoint mockCreatePackage;

    @MockBean
    private AuthService authService;

    @BeforeEach
    public void setup() throws Exception {
        when(authService.getToken()).thenReturn("mocked-token");
    }

    @Test
    public void testCreatePackageRoute_Success() throws Exception {
        // Arrange
        mockCreatePackage.expectedMessageCount(1);
        mockCreatePackage.whenAnyExchangeReceived(exchange -> {
            exchange.getMessage().setBody("{\"id\":\"12345\"}");
            exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 200);
        });

        String requestBody = "{\"packageType\":\"TYPE\",\"packageData\":{},\"orgId\":\"ORG1\",\"agentId\":\"AGENT1\"}";

        // Act
        String response = producerTemplate.requestBody(
            "direct:ru.seventech.esb.technoprom.createPackage.v2", 
            requestBody,
            String.class
        );

        // Assert
        mockCreatePackage.assertIsSatisfied();
        assertEquals("{\"id\":\"12345\"}", response);
    }

    @Test
    public void testGetDocumentRoute_Success() throws Exception {
        // Arrange
        AdviceWith.adviceWith(producerTemplate.getCamelContext(), "direct:getDocumentRoute", 
            advice -> advice.weaveByToUri("https:*").replace().to("mock:https:external-service/getDocument"));

        MockEndpoint mockGetDocument = producerTemplate.getCamelContext().getEndpoint(
            "mock:https:external-service/getDocument", MockEndpoint.class);
        
        mockGetDocument.expectedHeaderReceived("Authorization", "mocked-token");
        mockGetDocument.expectedHeaderReceived("CamelHttpMethod", "GET");
        mockGetDocument.expectedHeaderReceived("packageId", "123");
        mockGetDocument.expectedHeaderReceived("documentId", "456");
        mockGetDocument.returnReplyBody(exchange -> "document-content");

        // Act
        Object response = producerTemplate.requestBodyAndHeaders(
            "direct:getDocumentRoute",
            null,
            new java.util.HashMap<String, Object>() {{
                put("packageId", "123");
                put("documentId", "456");
            }}
        );

        // Assert
        mockGetDocument.assertIsSatisfied();
        assertEquals("document-content", response);
    }

    @Test
    public void testCreatePackageRoute_HttpError() throws Exception {
        // Arrange
        mockCreatePackage.expectedMessageCount(1);
        mockCreatePackage.whenAnyExchangeReceived(exchange -> {
            exchange.getMessage().setBody("{\"error\":\"Bad request\"}");
            exchange.getMessage().setHeader(Exchange.HTTP_RESPONSE_CODE, 400);
        });

        String requestBody = "{\"packageType\":\"INVALID_TYPE\"}";

        // Act
        Exchange response = producerTemplate.request(
            "direct:ru.seventech.esb.technoprom.createPackage.v2", 
            exchange -> exchange.getIn().setBody(requestBody)
        );

        // Assert
        mockCreatePackage.assertIsSatisfied();
        assertEquals(400, response.getMessage().getHeader(Exchange.HTTP_RESPONSE_CODE));
        assertEquals("{\"error\":\"Bad request\"}", response.getMessage().getBody());
    }

    @Test
    public void testOnlineObjectsRoute_Success() throws Exception {
        // Arrange
        AdviceWith.adviceWith(producerTemplate.getCamelContext(), "direct:onlineObjectsRoute", 
            advice -> advice.weaveByToUri("https:*").replace().to("mock:https:external-service/objects"));

        MockEndpoint mockObjects = producerTemplate.getCamelContext().getEndpoint(
            "mock:https:external-service/objects", MockEndpoint.class);
        
        mockObjects.returnReplyBody(exchange -> "[{\"id\":1,\"name\":\"Object1\"}]");

        // Act
        Object response = producerTemplate.requestBodyAndHeaders(
            "direct:onlineObjectsRoute",
            null,
            new java.util.HashMap<String, Object>() {{
                put("region", "Moscow");
                put("street", "Tverskaya");
            }}
        );

        // Assert
        mockObjects.assertIsSatisfied();
        assertEquals("[{\"id\":1,\"name\":\"Object1\"}]", response);
    }

    @Test
    public void testAddApplicationRoute_Success() throws Exception {
        // Arrange
        AdviceWith.adviceWith(producerTemplate.getCamelContext(), "direct:addApplicationRoute", 
            advice -> {
                advice.weaveByToUri("https:*/attachSignature*").replace().to("mock:https:external-service/attachSignature");
                advice.weaveByToUri("https:*/getPackage*").replace().to("mock:https:external-service/getPackage");
                advice.weaveByToUri("https:*/createZip*").replace().to("mock:https:external-service/createZip");
                advice.weaveByToUri("https:*/sendZip*").replace().to("mock:https:external-service/sendZip");
            });

        // Настройка моков
        MockEndpoint mockAttachSignature = producerTemplate.getCamelContext().getEndpoint(
            "mock:https:external-service/attachSignature", MockEndpoint.class);
        mockAttachSignature.returnReplyBody(exchange -> "{}");
        
        MockEndpoint mockGetPackage = producerTemplate.getCamelContext().getEndpoint(
            "mock:https:external-service/getPackage", MockEndpoint.class);
        mockGetPackage.returnReplyBody(exchange -> "{\"status\":\"OK\"}");
        
        MockEndpoint mockCreateZip = producerTemplate.getCamelContext().getEndpoint(
            "mock:https:external-service/createZip", MockEndpoint.class);
        mockCreateZip.returnReplyBody(exchange -> "{}");
        
        MockEndpoint mockSendZip = producerTemplate.getCamelContext().getEndpoint(
            "mock:https:external-service/sendZip", MockEndpoint.class);
        mockSendZip.returnReplyBody(exchange -> "{\"status\":\"SENT\"}");

        String requestBody = "{\"packageId\":\"123\",\"documents\":[{\"documentId\":\"doc1\",\"sigFileUID\":\"sig1\"}]}";

        // Act
        String response = producerTemplate.requestBody(
            "direct:addApplicationRoute", 
            requestBody,
            String.class
        );

        // Assert
        mockAttachSignature.assertIsSatisfied();
        mockGetPackage.assertIsSatisfied();
        mockCreateZip.assertIsSatisfied();
        mockSendZip.assertIsSatisfied();
        assertEquals("{\"status\":\"SENT\"}", response);
    }
}
