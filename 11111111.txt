ate final ReportService reportService;
    private final ReportCompleteDossierRepository reportCompleteDossierRepository;
    private final ReportDossierCompanyRepository reportDossierCompanyRepository;
    private final ClientsClient clients;
    private final ReportDocumentDetailRepository reportDocumentDetailRepository;
    private final ReportSpecificationBuilderService specificationBuilder;
    private final UserService userService;
    private final ModelMapper modelMapper;
    private final EntityManager entityManager;

    @Autowired
    private LoggerRequestContext loggerRequestContext;

    @Override
    @Transactional(readOnly = true)
    public ReportCompanyResponseDto getCompleteDossiersCompany(ReportCompanyRequestDto requestDto)
        throws AccessDeniedException {

        var report = reportService.getReport(requestDto.getReportId());
        if (!report.getAuthor().equals(loggerRequestContext.getConsumer())) {
            throw new AccessDeniedException("Доступ к отчету запрещён");
        }

        Specification<ReportCompleteDossier> spec = specificationBuilder.buildSpecification(requestDto);
        Pageable pageable = requestDto.getPageable();
        
        EntityGraph<ReportCompleteDossier> entityGraph = entityManager.createEntityGraph(ReportCompleteDossier.class);
        entityGraph.addAttributeNodes("client", "dossier", "report");
        Subgraph<Dossier> dossierSubgraph = entityGraph.addSubgraph("dossier");
        dossierSubgraph.addAttributeNodes("clientProduct", "dossierType");
        Subgraph<ClientProduct> clientProductSubgraph = dossierSubgraph.addSubgraph("clientProduct");
        clientProductSubgraph.addAttributeNodes("product", "clientAccounts");
        Subgraph<Product> productSubgraph = clientProductSubgraph.addSubgraph("product");
        productSubgraph.addAttributeNodes("productType");

        Page<ReportCompleteDossier> dossierPage = reportCompleteDossierRepository.findAll(
            (root, query, cb) -> {
                query.distinct(true);
                return spec.toPredicate(root, query, cb);
            },
            pageable
        );

        Set<Long> dossierIds = dossierPage.getContent().stream()
            .map(d -> d.getDossier().getId())
            .collect(Collectors.toSet());

        Map<Long, List<ReportDossierCompany>> companiesByDossierId = reportDossierCompanyRepository
            .findByReportCompleteDossierDossierIdIn(dossierIds)
            .stream()
            .collect(Collectors.groupingBy(c -> c.getReportCompleteDossier().getDossier().getId()));

        Map<Long, List<ReportDocumentDetail>> documentsByDossierId = reportDocumentDetailRepository
            .findByReportCompleteDossierDossierIdIn(dossierIds)
            .stream()
            .collect(Collectors.groupingBy(d -> d.getReportCompleteDossier().getDossier().getId()));

        boolean hasVipAccess = userService.hasRole(RolesConstants.VIP_UL);

        List<ReportCompanyResponseDto.ReportDataDTO> reportData = dossierPage.getContent().stream()
            .map(dossier -> convertToReportDataDTO(
                dossier,
                companiesByDossierId.getOrDefault(dossier.getDossier().getId(), Collections.emptyList()),
                documentsByDossierId.getOrDefault(dossier.getDossier().getId(), Collections.emptyList()),
                hasVipAccess
            ))
            .toList();

        return buildResponse(report, dossierPage, reportData, requestDto);
    }

    private ReportCompanyResponseDto.ReportDataDTO convertToReportDataDTO(
        ReportCompleteDossier dossier, List<ReportDossierCompany> companies,
        List<ReportDocumentDetail> documentDetails, boolean hasVipAccess
    ) {
        ReportCompanyResponseDto.ReportDataDTO.ClientCompanyDTO clientCompany = companies.stream()
            .findFirst()
            .map(company -> buildClientCompanyDTO(dossier, company))
            .orElse(null);

        boolean isDocumentAccess = dossier.getClient() == null || 
            dossier.getClient().getVipStatus() == null || !dossier.getClient().getVipStatus() || hasVipAccess;

        List<ReportCompanyResponseDto.ReportDataDTO.DocumentDetailDTO> documentsDetail = documentDetails.stream()
            .map(detail -> buildDocumentDetailDTO(detail, isDocumentAccess))
            .toList();

        ClientProduct clientProduct = dossier.getDossier() != null ? dossier.getDossier().getClientProduct() : null;

        return ReportCompanyResponseDto.ReportDataDTO.builder()
            .clientCompany(clientCompany)
            .dossierId(dossier.getDossier().getId())
            .dossierTypeName(dossier.getDossier() != null ? dossier.getDossier().getDossierType().getName() : null)
            .productName(getProductName(clientProduct))
            .productTypeName(getProductTypeName(clientProduct))
            .productOpen(getProductOpenDate(clientProduct))
            .dealId(getDealId(clientProduct))
            .completeStatus(dossier.getCompleteStatus())
            .completeStatusName(dossier.getCompleteStatus() != null ? 
                CompleteStatusDocuments.valueOf(dossier.getCompleteStatus()).getDescription() : null)
            .documentsTotal(dossier.getDocumentsTotal())
            .documentsAvailable(dossier.getDocumentsAvailable())
            .dossierOfficeId(getOfficeId(dossier))
            .dossierOfficeName(getOfficeName(dossier))
            .productCreationChannel(getProductCreationChannel(clientProduct))
            .productActivationChannel(getProductActivationChannel(clientProduct))
            .productPlanEndDate(getProductPlanEndDate(clientProduct))
            .productEndDate(getProductEndDate(clientProduct))
            .contractStatus(getContractStatus(clientProduct))
            .accountCode(getAccountCode(clientProduct))
            .documentsDetail(documentsDetail)
            .build();
    }

    private ReportCompanyResponseDto.ReportDataDTO.ClientCompanyDTO buildClientCompanyDTO(
        ReportCompleteDossier dossier, ReportDossierCompany company
    ) {
        return ReportCompanyResponseDto.ReportDataDTO.ClientCompanyDTO.builder()
            .clientId(dossier.getClient() != null ? dossier.getClient().getId() : null)
            .absClientId(dossier.getClient() != null ? dossier.getClient().getAbsClientId() : null)
            .clientStatusName(dossier.getClientStatus() != null ?
                ClientStatus.getDescriptionFromCode(dossier.getClientStatus()) : null)
            .absClientCreated(dossier.getClient() != null ? dossier.getClient().getAbsCreatedAt() : null)
            .name(company.getName())
            .inn(company.getInn())
            .kpp(company.getKpp())
            .isVip(dossier.getClient() != null ? dossier.getClient().getVipStatus() : false)
            .build();
    }

    private ReportCompanyResponseDto.ReportDataDTO.DocumentDetailDTO buildDocumentDetailDTO(
        ReportDocumentDetail detail, boolean isDocumentAccess
    ) {
        return ReportCompanyResponseDto.ReportDataDTO.DocumentDetailDTO.builder()
            .documentTypeName(detail.getDocumentTypeName())
            .documentId(detail.getDocument() != null && isDocumentAccess ? 
                detail.getDocument().getDocumentId() : null)
            .documentAvailable(detail.getDocumentAvailable())
            .documentRequired(detail.getDocumentRequired())
            .build();
    }

    private String getProductName(ClientProduct clientProduct) {
        return clientProduct != null && clientProduct.getProduct() != null ? 
            clientProduct.getProduct().getName() : null;
    }

    private String getProductTypeName(ClientProduct clientProduct) {
        return clientProduct != null && clientProduct.getProduct() != null && 
            clientProduct.getProduct().getProductType() != null ? 
            clientProduct.getProduct().getProductType().getType() : null;
    }

    private LocalDate getProductOpenDate(ClientProduct clientProduct) {
        return clientProduct != null && clientProduct.getProductOpen() != null ? 
            LocalDate.from(clientProduct.getProductOpen()) : null;
    }

    private String getDealId(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getDealId() : null;
    }

    private Long getOfficeId(ReportCompleteDossier dossier) {
        return dossier.getReport() != null && dossier.getReport().getOffice() != null ? 
            dossier.getReport().getOffice().getId() : null;
    }

    private String getOfficeName(ReportCompleteDossier dossier) {
        return dossier.getReport() != null && dossier.getReport().getOffice() != null ? 
            dossier.getReport().getOffice().getLabel() : null;
    }

    private String getProductCreationChannel(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getProductCreationChannel() : null;
    }

    private String getProductActivationChannel(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getProductActivationChannel() : null;
    }

    private LocalDateTime getProductPlanEndDate(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getProductPlanEnd() : null;
    }

    private LocalDateTime getProductEndDate(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getProductEnd() : null;
    }

    private String getContractStatus(ClientProduct clientProduct) {
        return clientProduct != null ? clientProduct.getContractStatus() : null;
    }

    private String getAccountCode(ClientProduct clientProduct) {
        return clientProduct != null && clientProduct.getClientAccounts() != null ? 
            clientProduct.getClientAccounts().stream()
                .findFirst()
                .map(ClientAccount::getAccountCode)
                .orElse(null) : null;
    }

    private ReportCompanyResponseDto buildResponse(
        Report report,
        Page<ReportCompleteDossier> dossierPage,
        List<ReportCompanyResponseDto.ReportDataDTO> reportData,
        ReportCompanyRequestDto requestDto
    ) {
        ReportCompanyResponseDto.ReportInfoDTO reportInfo = ReportCompanyResponseDto.ReportInfoDTO.builder()
            .reportTypeId(report.getReportType().getId())
            .reportId(report.getReportId())
            .generationStatus(report.getGenerationStatus())
            .author(report.getAuthor())
            .createdAt(report.getCreatedAt())
            .clientCategoryId(report.getClientCategory() != null ? report.getClientCategory().getId() : null)
            .clientStatus(ClientStatus.getDescriptionFromCode(report.getClientStatus()))
            .office(report.getOffice() != null ? report.getOffice().getId() : null)
            .productTypeName(report.getProductType() != null ? report.getProductType().getType() : null)
            .dossiersTotal(report.getDossiersTotal() != null ? report.getDossiersTotal() : 0L)
            .dossiersComplete(report.getDossiersComplete() != null ? report.getDossiersComplete() : 0L)
            .clientCreated(new ReportCompanyResponseDto.ReportInfoDTO.DateRangeDTO(
                report.getClientCreatedMin(),
                report.getClientCreatedMax()))
            .productCreated(new ReportCompanyResponseDto.ReportInfoDTO.DateRangeDTO(
                report.getProductCreatedMin(),
                report.getProductCreatedMax()))
            .build();

        return ReportCompanyResponseDto.builder()
            .reportInfo(reportInfo)
            .reportData(reportData)
            .pagination(new ReportCompanyResponseDto.PaginationDTO(
                (long) dossierPage.getNumber() + 1,
                (long) dossierPage.getTotalPages(),
                dossierPage.getTotalElements(),
                (long) dossierPage.getSize()))
            .sortBy(convertSortBy(requestDto.getSortBy()))
            .filter(convertFilter(requestDto.getFilter()))
            .build();
    }

    private ReportCompanyResponseDto.SortByDTO convertSortBy(ReportCompanyRequestDto.SortByDTO sortBy) {
        if (sortBy == null)
            return null;
        return new ReportCompanyResponseDto.SortByDTO(sortBy.getField(), sortBy.getValue());
    }

    private List<ReportCompanyResponseDto.FilterDTO> convertFilter(List<ReportCompanyRequestDto.FilterDTO> filters) {
        if (filters == null) return null;
        return filters.stream()
            .map(f -> new ReportCompanyResponseDto.FilterDTO(f.getField(), f.getValue()))
            .toList();
    }